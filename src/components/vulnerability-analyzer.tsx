"use client";

import { useState, useTransition, type ChangeEvent } from "react";
import { AlertTriangle, CheckCircle2, FileJson, Loader2, Sparkles, UploadCloud, XCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { getAnalysisAndSuggestions, getAiSummary } from "@/lib/actions";
import { VULNERABLE_PACKAGES } from "@/lib/vulnerabilities";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/card";
import { Alert, AlertDescription, AlertTitle } from "./ui/alert";
import { Badge } from "./ui/badge";

interface UploadedFile {
  name: string;
  content: string;
}

interface Dependency {
  name: string;
  version: string;
}

interface AnalysisResult {
  packageName: string;
  installedVersion: string;
  isMatch: boolean;
  vulnerableVersions: string;
  suggestion: string;
}

export default function VulnerabilityAnalyzer() {
  const [files, setFiles] = useState<UploadedFile[]>([]);
  const [analysisResults, setAnalysisResults] = useState<AnalysisResult[]>([]);
  const [aiSummary, setAiSummary] = useState<string>('');
  const [isAnalyzing, startTransition] = useTransition();
  const { toast } = useToast();

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    const uploadedFiles = event.target.files;
    if (!uploadedFiles) return;

    const filePromises = Array.from(uploadedFiles)
      .filter(file => file.name === 'package.json' || file.name === 'package-lock.json')
      .map(file => {
        return new Promise<UploadedFile>((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = e => resolve({ name: file.name, content: e.target?.result as string });
          reader.onerror = e => reject(e);
          reader.readAsText(file);
        });
      });

    Promise.all(filePromises)
      .then(newFiles => {
        setFiles(currentFiles => {
            const fileMap = new Map(currentFiles.map(f => [f.name, f]));
            newFiles.forEach(f => fileMap.set(f.name, f));
            return Array.from(fileMap.values());
        });
        toast({
          title: "Archivos subidos",
          description: `${newFiles.length} archivo(s) listo(s) para el an치lisis.`,
        });
      })
      .catch(() => {
        toast({
          variant: "destructive",
          title: "Error de lectura de archivo",
          description: "No se pudieron leer uno o m치s archivos.",
        });
      });
  };

  const parseDependencies = (): Dependency[] => {
    const deps = new Map<string, string>();

    const packageLockFile = files.find(f => f.name === 'package-lock.json');
    if (packageLockFile) {
      try {
        const lockData = JSON.parse(packageLockFile.content);
        if (lockData.packages) {
          for (const path in lockData.packages) {
            if (!path) continue;
            const pkg = lockData.packages[path];
            const nameMatch = path.match(/node_modules\/(.+)$/);
            const name = nameMatch ? nameMatch[1].split('node_modules/').pop() : undefined;
            if (pkg.version && name && !name.startsWith('@types/')) {
              deps.set(name, pkg.version);
            }
          }
        }
      } catch (e) {
        console.error("Error al analizar package-lock.json", e)
      }
    }

    const packageJsonFile = files.find(f => f.name === 'package.json');
    if (packageJsonFile) {
       try {
        const jsonData = JSON.parse(packageJsonFile.content);
        const depTypes = ['dependencies', 'devDependencies', 'peerDependencies', 'optionalDependencies'];
        for (const type of depTypes) {
            if (jsonData[type]) {
                for (const name in jsonData[type]) {
                    if (!deps.has(name)) {
                        deps.set(name, jsonData[type][name]);
                    }
                }
            }
        }
      } catch (e) {
        console.error("Error al analizar package.json", e);
      }
    }
    
    return Array.from(deps, ([name, version]) => ({ name, version }));
  };

  const handleAnalyze = () => {
    startTransition(async () => {
      setAnalysisResults([]);
      setAiSummary('');

      const dependencies = parseDependencies();
      if (dependencies.length === 0) {
        toast({
          variant: "destructive",
          title: "No se encontraron dependencias",
          description: "Sube un archivo package.json o package-lock.json v치lido.",
        });
        return;
      }
      
      const clientAnalysis = dependencies.map(dep => {
        const vulnData = VULNERABLE_PACKAGES.find(v => v.name === dep.name);
        const cleanedVersion = dep.version.replace(/[^\\d.]/g, '');
        const isMatch = !!vulnData && vulnData.versions.some(v => v === cleanedVersion);
        return {
          packageName: dep.name,
          installedVersion: dep.version,
          isMatch,
          vulnerableVersions: vulnData?.versions.join(', ') || 'N/A',
        };
      });

      const genkitInput = dependencies.map(d => ({ packageName: d.name, installedVersion: d.version }));
      const aiSuggestions = await getAnalysisAndSuggestions(genkitInput);

      const finalResults = clientAnalysis.map(clientResult => {
        const aiResult = aiSuggestions.find(ai => ai.packageName === clientResult.packageName);
        return {
          ...clientResult,
          suggestion: aiResult?.suggestion || 'No hay sugerencia de IA disponible.',
        };
      });

      setAnalysisResults(finalResults);
      
      if(finalResults.some(r => r.isMatch)) {
        const summary = await getAiSummary(JSON.stringify(finalResults.filter(r => r.isMatch)));
        setAiSummary(summary.recommendations);
      }
    });
  };

  return (
    <div className="space-y-6">
      <div className="flex flex-col items-center justify-center w-full">
        <label htmlFor="dropzone-file" className="flex flex-col items-center justify-center w-full h-64 border-2 border-dashed rounded-lg cursor-pointer bg-muted/50 hover:bg-muted">
            <div className="flex flex-col items-center justify-center pt-5 pb-6">
                <UploadCloud className="w-10 h-10 mb-4 text-muted-foreground" />
                <p className="mb-2 text-sm text-muted-foreground"><span className="font-semibold">Haz clic para subir</span> o arrastra y suelta</p>
                <p className="text-xs text-muted-foreground">package.json y/o package-lock.json</p>
            </div>
            <input id="dropzone-file" type="file" className="hidden" multiple onChange={handleFileChange} accept=".json" />
        </label>
        {files.length > 0 && (
          <div className="w-full mt-4">
            <h4 className="font-medium text-sm mb-2">Archivos subidos:</h4>
            <ul className="grid grid-cols-1 md:grid-cols-2 gap-2">
              {files.map(file => (
                <li key={file.name} className="flex items-center gap-2 p-2 rounded-md border text-sm">
                  <FileJson className="w-4 h-4 text-muted-foreground" />
                  <span>{file.name}</span>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>

      <Button onClick={handleAnalyze} disabled={isAnalyzing || files.length === 0} className="w-full">
        {isAnalyzing ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
        Analizar Dependencias
      </Button>

      {isAnalyzing && (
        <div className="flex items-center justify-center p-8 text-muted-foreground">
            <Loader2 className="mr-2 h-6 w-6 animate-spin" />
            <p>Analizando dependencias... Esto puede tardar un momento.</p>
        </div>
      )}

      {analysisResults.length > 0 && (
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Resultados del An치lisis</CardTitle>
              <CardDescription>Se encontraron {analysisResults.filter(r => r.isMatch).length} vulnerabilidades potenciales en {analysisResults.length} dependencias.</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Paquete</TableHead>
                    <TableHead>Instalada</TableHead>
                    <TableHead>Coincidencia</TableHead>
                    <TableHead>Versiones Vulnerables</TableHead>
                    <TableHead>Sugerencia de IA</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {analysisResults.map(result => (
                    <TableRow key={result.packageName} className={result.isMatch ? "bg-destructive/10" : ""}>
                      <TableCell className="font-medium">{result.packageName}</TableCell>
                      <TableCell><Badge variant="secondary">{result.installedVersion}</Badge></TableCell>
                      <TableCell>
                        {result.isMatch ? (
                          <XCircle className="h-5 w-5 text-destructive" />
                        ) : (
                          <CheckCircle2 className="h-5 w-5 text-chart-2" />
                        )}
                      </TableCell>
                      <TableCell>{result.vulnerableVersions}</TableCell>
                      <TableCell className="text-sm">{result.suggestion}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
          
          {aiSummary && (
             <Alert className="border-primary/50">
              <Sparkles className="h-4 w-4" />
              <AlertTitle className="font-semibold flex items-center gap-2">Recomendaciones de Seguridad de IA</AlertTitle>
              <AlertDescription>
                {aiSummary}
              </AlertDescription>
            </Alert>
          )}
        </div>
      )}
    </div>
  );
}
