"use client";

import { useState, useTransition, type ChangeEvent } from "react";
import { CheckCircle2, Download, FileJson, Loader2, Search, UploadCloud, XCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "./ui/card";
import { Alert, AlertDescription, AlertTitle } from "./ui/alert";
import { Badge } from "./ui/badge";
import { PaginationControls } from "./pagination-controls";
import { VULNERABLE_PACKAGES } from "@/lib/vulnerabilities";
import { Input } from "./ui/input";

interface UploadedFile {
  name: string;
  content: string;
}

interface Dependency {
  name: string;
  version: string;
  source: string;
}

interface AnalysisResult {
  packageName: string;
  installedVersion: string;
  isVulnerable: boolean;
  vulnerableVersion?: string;
  source: string;
}

export default function VulnerabilityAnalyzer() {
  const [files, setFiles] = useState<UploadedFile[]>([]);
  const [analysisResults, setAnalysisResults] = useState<AnalysisResult[]>([]);
  const [isAnalyzing, startTransition] = useTransition();
  const [analyzedFileNames, setAnalyzedFileNames] = useState<string[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [hasVulnerabilities, setHasVulnerabilities] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const { toast } = useToast();

  const itemsPerPage = 15;

  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {
    const uploadedFiles = event.target.files;
    if (!uploadedFiles) return;

    const filePromises = Array.from(uploadedFiles)
      .filter(file => file.name === 'package.json' || file.name === 'package-lock.json')
      .map(file => {
        return new Promise<UploadedFile>((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = e => resolve({ name: file.name, content: e.target?.result as string });
          reader.onerror = e => reject(e);
          reader.readAsText(file);
        });
      });

    Promise.all(filePromises)
      .then(newFiles => {
        setFiles(currentFiles => {
            const fileMap = new Map(currentFiles.map(f => [f.name, f]));
            newFiles.forEach(f => fileMap.set(f.name, f));
            return Array.from(fileMap.values());
        });
        toast({
          title: "Archivos subidos",
          description: `${newFiles.length} archivo(s) listo(s) para el an치lisis.`,
        });
      })
      .catch(() => {
        toast({
          variant: "destructive",
          title: "Error de lectura de archivo",
          description: "No se pudieron leer uno o m치s archivos.",
        });
      });
  };

  const parseDependencies = (): { dependencies: Dependency[], fileNames: string[] } => {
    const deps = new Map<string, { version: string, source: string }>();
    const fileNames: string[] = [];

    const packageLockFile = files.find(f => f.name === 'package-lock.json');
    if (packageLockFile) {
      fileNames.push(packageLockFile.name);
      try {
        const lockData = JSON.parse(packageLockFile.content);
        if (lockData.packages) {
          for (const path in lockData.packages) {
            if (!path) continue;
            const pkg = lockData.packages[path];
            const nameMatch = path.match(/node_modules\/(.+)$/);
            const name = nameMatch ? nameMatch[1].split('node_modules/').pop() : undefined;
            if (pkg.version && name && !name.startsWith('@types/')) {
              deps.set(name, { version: pkg.version, source: 'package-lock.json' });
            }
          }
        }
      } catch (e) {
        console.error("Error al analizar package-lock.json", e)
      }
    }

    const packageJsonFile = files.find(f => f.name === 'package.json');
    if (packageJsonFile) {
       if(!fileNames.includes(packageJsonFile.name)) {
         fileNames.push(packageJsonFile.name);
       }
       try {
        const jsonData = JSON.parse(packageJsonFile.content);
        const depTypes = ['dependencies', 'devDependencies', 'peerDependencies', 'optionalDependencies'];
        for (const type of depTypes) {
            if (jsonData[type]) {
                for (const name in jsonData[type]) {
                    if (!deps.has(name)) {
                        deps.set(name, { version: jsonData[type][name], source: 'package.json' });
                    }
                }
            }
        }
      } catch (e) {
        console.error("Error al analizar package.json", e);
      }
    }
    
    return {
      dependencies: Array.from(deps, ([name, {version, source}]) => ({ name, version, source })),
      fileNames: fileNames,
    }
  };

  const performAnalysis = (dependencies: Dependency[]): AnalysisResult[] => {
    const vulnerabilityMap = new Map(VULNERABLE_PACKAGES.map(p => [p.name, p]));

    return dependencies.map(dep => {
      const vulnerability = vulnerabilityMap.get(dep.name);
      let isVulnerable = false;
      
      if (vulnerability) {
        const installedVersion = dep.version.replace(/[\^~]/, ''); // Simplification for direct comparison
        const vulnerableVersions = vulnerability.versions.split(',').map(v => v.trim());
        if (vulnerableVersions.includes(installedVersion)) {
          isVulnerable = true;
        }
      }

      return {
        packageName: dep.name,
        installedVersion: dep.version,
        isVulnerable,
        vulnerableVersion: vulnerability ? vulnerability.versions : undefined,
        source: dep.source,
      };
    });
  }

  const handleAnalyze = () => {
    startTransition(() => {
      setCurrentPage(1);
      setAnalysisResults([]);
      setAnalyzedFileNames([]);
      setHasVulnerabilities(false);
      setSearchTerm("");

      const { dependencies, fileNames } = parseDependencies();
      setAnalyzedFileNames(fileNames);

      if (dependencies.length === 0) {
        toast({
          variant: "destructive",
          title: "No se encontraron dependencias",
          description: "Sube un archivo package.json o package-lock.json v치lido.",
        });
        return;
      }
      
      const results = performAnalysis(dependencies);
      
      results.sort((a, b) => {
        if (a.isVulnerable && !b.isVulnerable) return -1;
        if (!a.isVulnerable && b.isVulnerable) return 1;
        return a.packageName.localeCompare(b.packageName);
      });
      
      setAnalysisResults(results);

      const anyVulnerable = results.some(r => r.isVulnerable);
      setHasVulnerabilities(anyVulnerable);
    });
  };

  const handleExport = () => {
    if(analysisResults.length === 0) return;

    const headers = ['Paquete', 'Versi칩n Instalada', 'Estado', 'Versiones Vulnerables', 'Origen'];
    const csvContent = [
      headers.join(','),
      ...analysisResults.map(r => 
        [
          `"${r.packageName}"`,
          `"${r.installedVersion}"`,
          `"${r.isVulnerable ? 'Vulnerable' : 'Seguro'}"`,
          `"${r.vulnerableVersion || 'N/A'}"`,
          `"${r.source}"`,
        ].join(',')
      )
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', 'reporte-vulnerabilidades.csv');
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  
  const filteredItems = analysisResults.filter(item => 
    item.packageName.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const totalPages = Math.ceil(filteredItems.length / itemsPerPage);
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredItems.slice(indexOfFirstItem, indexOfLastItem);

  const handlePageChange = (newPage: number) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage);
    }
  };

  const handleSearchChange = (event: ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
    setCurrentPage(1); 
  };


  return (
    <div className="space-y-6">
      <div className="flex flex-col items-center justify-center w-full">
        <label htmlFor="dropzone-file" className="flex flex-col items-center justify-center w-full h-64 border-2 border-dashed rounded-lg cursor-pointer bg-muted/50 hover:bg-muted">
            <div className="flex flex-col items-center justify-center pt-5 pb-6">
                <UploadCloud className="w-10 h-10 mb-4 text-muted-foreground" />
                <p className="mb-2 text-sm text-muted-foreground"><span className="font-semibold">Haz clic para subir</span> o arrastra y suelta</p>
                <p className="text-xs text-muted-foreground">package.json y/o package-lock.json</p>
            </div>
            <input id="dropzone-file" type="file" className="hidden" multiple onChange={handleFileChange} accept=".json" />
        </label>
        {files.length > 0 && (
          <div className="w-full mt-4">
            <h4 className="font-medium text-sm mb-2">Archivos subidos:</h4>
            <ul className="grid grid-cols-1 md:grid-cols-2 gap-2">
              {files.map(file => (
                <li key={file.name} className="flex items-center gap-2 p-2 rounded-md border text-sm">
                  <FileJson className="w-4 h-4 text-muted-foreground" />
                  <span>{file.name}</span>
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>

      <Button onClick={handleAnalyze} disabled={isAnalyzing || files.length === 0} className="w-full">
        {isAnalyzing ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
        Analizar Dependencias
      </Button>

      {isAnalyzing && (
        <div className="flex items-center justify-center p-8 text-muted-foreground">
            <Loader2 className="mr-2 h-6 w-6 animate-spin" />
            <p>Analizando dependencias...</p>
        </div>
      )}

      {analysisResults.length > 0 && (
        <div className="space-y-6">
          <Card>
            <CardHeader>
                <div className="flex justify-between items-start flex-col sm:flex-row sm:items-center gap-4">
                    <div>
                        <CardTitle>Resultados del An치lisis</CardTitle>
                        <CardDescription>
                            Se encontraron {analysisResults.filter(r => r.isVulnerable).length} vulnerabilidades potenciales en {analysisResults.length} dependencias
                            {analyzedFileNames.length > 0 && ` de ${analyzedFileNames.join(', ')}`}.
                        </CardDescription>
                    </div>
                    <Button onClick={handleExport} variant="outline" size="sm">
                        <Download className="mr-2 h-4 w-4" />
                        Exportar
                    </Button>
                </div>
            </CardHeader>
            <CardContent>
              <div className="relative mb-4">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  type="search"
                  placeholder="Buscar por nombre de paquete..."
                  value={searchTerm}
                  onChange={handleSearchChange}
                  className="pl-9"
                />
              </div>
              <div className="rounded-md border">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Paquete</TableHead>
                      <TableHead>Instalada</TableHead>
                      <TableHead>Vulnerable</TableHead>
                      <TableHead>Estado</TableHead>
                      <TableHead>Origen</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {currentItems.map(result => (
                      <TableRow key={result.packageName} className={result.isVulnerable ? "bg-destructive/10" : ""}>
                        <TableCell className="font-medium">{result.packageName}</TableCell>
                        <TableCell><Badge variant="secondary">{result.installedVersion}</Badge></TableCell>
                         <TableCell>
                          {result.vulnerableVersion ? 
                            <Badge variant="destructive">{result.vulnerableVersion}</Badge> : 
                            <span className="text-muted-foreground">N/A</span>
                          }
                        </TableCell>
                        <TableCell>
                          {result.isVulnerable ? (
                            <div className="flex items-center gap-2">
                              <XCircle className="h-5 w-5 text-destructive" />
                              <span className="text-destructive">Vulnerable</span>
                            </div>
                          ) : (
                            <div className="flex items-center gap-2">
                             <CheckCircle2 className="h-5 w-5 text-green-500" />
                              <span className="text-green-500">Seguro</span>
                            </div>
                          )}
                        </TableCell>
                        <TableCell>
                          <Badge variant={result.source === 'package-lock.json' ? 'default' : 'outline'}>{result.source}</Badge>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
             <CardFooter>
              <PaginationControls
                currentPage={currentPage}
                totalPages={totalPages}
                onPageChange={handlePageChange}
                className="w-full"
              />
            </CardFooter>
          </Card>
          
          {hasVulnerabilities && (
             <Alert variant="destructive">
              <XCircle className="h-4 w-4" />
              <AlertTitle className="font-semibold">춰Se encontraron vulnerabilidades!</AlertTitle>
              <AlertDescription>
                Se recomienda encarecidamente contactar al equipo de Ciberseguridad o al equipo de transici칩n para obtener orientaci칩n sobre la remediaci칩n. Puede contactarlos en <a href="mailto:gta@alicorp.com.pe" className="font-medium underline">gta@alicorp.com.pe</a>.
              </AlertDescription>
            </Alert>
          )}
        </div>
      )}
    </div>
  );
}
